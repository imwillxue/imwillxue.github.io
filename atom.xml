<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://willxuecn.github.io</id>
    <title>WillXue&apos;s Blog</title>
    <updated>2020-04-18T17:51:29.680Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://willxuecn.github.io"/>
    <link rel="self" href="https://willxuecn.github.io/atom.xml"/>
    <subtitle>一个好高骛远的码农</subtitle>
    <logo>https://willxuecn.github.io/images/avatar.png</logo>
    <icon>https://willxuecn.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WillXue&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[go语言学习（一）net/http包客户端实例练习]]></title>
        <id>https://willxuecn.github.io/post/golang-learn-01-20161130/</id>
        <link href="https://willxuecn.github.io/post/golang-learn-01-20161130/">
        </link>
        <updated>2016-11-30T15:18:07.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>因为我是学Java的，主要做web开发，所以看了点go的基础知识后，就试着把以前的demo用go实现以下，而且go web开发非常简便只要几行代码，就能实现简单http服务器，今天主要写一下用net/http包模拟客户端发送请求实现百度推送（实时）。</p>
</blockquote>
<h1 id="开始">开始</h1>
<h2 id="项目结构">项目结构</h2>
<pre><code>.
├── static
|   ├── css
|   └── layer
├── views
|   └── index.html
└── main.go
</code></pre>
<h2 id="maingo">main.go</h2>
<pre><code>package main

import (
	&quot;fmt&quot;
	&quot;html/template&quot;
	&quot;io/ioutil&quot;
	&quot;log&quot;
	&quot;net/http&quot;
	&quot;net/url&quot;
	&quot;strings&quot;
)

func main() {
	http.HandleFunc(&quot;/&quot;, index)
	http.HandleFunc(&quot;/send&quot;, bdSend)
	//处理静态文件
	http.Handle(&quot;/static/&quot;, http.StripPrefix(&quot;/static/&quot;, http.FileServer(http.Dir(&quot;static&quot;))))
	err := http.ListenAndServe(&quot;:80&quot;, nil)
	if err != nil {
		log.Fatal(err)
	}
}

//首页
func index(w http.ResponseWriter, r *http.Request) {
	if r.Method == &quot;GET&quot; {
		t, err := template.ParseFiles(&quot;views/index.html&quot;)
		if err != nil {
			log.Fatal(err)
		}
		t.Execute(w, nil)
	}
}

//推送
func bdSend(w http.ResponseWriter, r *http.Request) {
	if r.Method == &quot;POST&quot; {
		request(w, r)
	}
}

//模拟http客户端post发送请求
func request(w http.ResponseWriter, r *http.Request) {
	//先解析form
	err := r.ParseForm()
	
	if err != nil {
		log.Fatal(err)
	}
	//请求地址
	var apiURL string
	switch r.Form[&quot;oper&quot;][0] {
	case &quot;post&quot;:
		apiURL = &quot;http://data.zz.baidu.com/urls&quot;
	case &quot;update&quot;:
		apiURL = &quot;http://data.zz.baidu.com/update&quot;
	case &quot;del&quot;:
		apiURL = &quot;http://data.zz.baidu.com/del&quot;
	}

	//初始化参数
	param := url.Values{}

	//配置请求参数,方法内部已处理urlencode问题,中文参数可以直接传参
	param.Set(&quot;site&quot;, r.Form[&quot;site&quot;][0])
	param.Set(&quot;token&quot;, r.Form[&quot;token&quot;][0])

	var URL *url.URL
	URL, err = url.Parse(apiURL)
	if err != nil {
		fmt.Printf(&quot;解析url错误:\r\n%v&quot;, err)
	}
	//如果参数中有中文参数,这个方法会进行URLEncode
	URL.RawQuery = param.Encode()
	client := &amp;http.Client{}
	req, _ := http.NewRequest(&quot;POST&quot;, URL.String(), strings.NewReader(r.Form[&quot;sendURL&quot;][0]))

	req.Header.Set(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)
	//req.Header.Set(&quot;User-Agent&quot;, &quot;curl/7.12.1&quot;)
	//req.Header.Set(&quot;Host&quot;, &quot;data.zz.baidu.com&quot;)

	//发送请求
	resp, err := client.Do(req)
	//注意关闭resp.Body
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf(&quot;请求失败,错误信息:\r\n%v&quot;, err)
	} else {
		//var returns map[string]interface{}
		//json.Unmarshal(data, &amp;returns)
		//data, err = json.Marshal(returns)
		//将返回的json数据返给客户端浏览器
		fmt.Fprintln(w, string(data))
	}
}
</code></pre>
<h2 id="indexhtml">index.html</h2>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;zh-CN&quot;&gt;
	&lt;head&gt;
		&lt;meta charset=&quot;utf-8&quot;&gt;
		&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
		&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
		&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;
		&lt;title&gt;百度主动推送(实时)&lt;/title&gt;
		&lt;LINK rel=&quot;Bookmark&quot; href=&quot;/static/favicon.ico&quot;&gt;
		&lt;LINK rel=&quot;Shortcut Icon&quot; href=&quot;/static/favicon.ico&quot; /&gt;
		&lt;!-- Bootstrap --&gt;
		&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt;
		&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/style.css&quot;&gt;
		&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;
		&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;
		&lt;!--[if lt IE 9]&gt;
			&lt;script src=&quot;//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;
			&lt;script src=&quot;//cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;
	    &lt;![endif]--&gt;
	&lt;/head&gt;
	&lt;body class=&quot;bg-body&quot;&gt;
		&lt;div class=&quot;container text-center bg&quot;&gt;
			&lt;h1&gt;百度主动推送（实时）&lt;/h1&gt;
			&lt;form class=&quot;form-horizontal&quot; id=&quot;form&quot; &gt;
				&lt;div class=&quot;form-group  form-group-lg&quot;&gt;
					&lt;div class=&quot;col-sm-8 col-sm-offset-2&quot;&gt;
						&lt;select class=&quot;form-control&quot; id=&quot;oper&quot; name=&quot;oper&quot;&gt;
							&lt;option value=&quot;post&quot;&gt;推送数据&lt;/option&gt;
							&lt;option value=&quot;update&quot;&gt;更新数据&lt;/option&gt;
							&lt;option value=&quot;del&quot;&gt;删除数据&lt;/option&gt;
						&lt;/select&gt;
					&lt;/div&gt;
				&lt;/div&gt;
				&lt;div class=&quot;form-group  form-group-lg&quot;&gt;
					&lt;div class=&quot;col-sm-8 col-sm-offset-2&quot;&gt;
						&lt;input type=&quot;tel&quot; class=&quot;form-control&quot; id=&quot;site&quot; name=&quot;site&quot; placeholder=&quot;要推送内容的网站，例如：www.example.com&quot; required &gt;
					&lt;/div&gt;
				&lt;/div&gt;
				&lt;div class=&quot;form-group  form-group-lg&quot;&gt;
					&lt;div class=&quot;col-sm-8 col-sm-offset-2&quot;&gt;
						&lt;input type=&quot;tel&quot; class=&quot;form-control&quot; id=&quot;token&quot; name=&quot;token&quot; placeholder=&quot;百度站长平台秘钥，例如：ZD4V6EK2QNpzwill&quot; required &gt;
					&lt;/div&gt;
				&lt;/div&gt;
				&lt;div class=&quot;form-group  form-group-lg&quot;&gt;
					&lt;div class=&quot;col-sm-8 col-sm-offset-2&quot;&gt;
						&lt;textarea class=&quot;form-control&quot; name=&quot;sendURL&quot; rows=&quot;8&quot; placeholder=&quot;网址之间要换行，例如：
http://www.example/abc.hml
http://www.example/bcd.html&quot; &gt;&lt;/textarea&gt;
					&lt;/div&gt;
				&lt;/div&gt;
				&lt;div class=&quot;form-group  form-group-lg&quot;&gt;
					&lt;div class=&quot;col-sm-8 col-sm-offset-2&quot;&gt;
						&lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-lg btn-block&quot; onclick=&quot;ajaxSub()&quot;&gt;推送&lt;/button&gt;
					&lt;/div&gt;
				&lt;/div&gt;
				&lt;h3&gt;&amp;copy; 2016 powered by &lt;a href=&quot;http://willxue.top&quot; target=&quot;_blank&quot;&gt;willxue&lt;/a&gt;&lt;/h3&gt;
			&lt;/form&gt;
		
			&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;
			&lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt;
			&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;
			&lt;script src=&quot;//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
			&lt;script src=&quot;/static/layer/layer.js&quot;&gt;&lt;/script&gt;
			&lt;script type=&quot;text/javascript&quot;&gt;
				function ajaxSub(){
					$.post(&quot;/send&quot;, $(&quot;#form&quot;).serialize(), function(result){
						if (result.indexOf(&quot;Exception&quot;)&gt;0) {
							layer.alert(&quot;请确认站点和token是否匹配&quot;,{title: &quot;错误&quot;,icon:2});
						} else {
							var data = JSON.parse(result);
							if (result.indexOf(&quot;success&quot;)&gt;0) {
								layer.alert(&quot;成功推送了：&quot;+data.success+&quot; 个&lt;br/&gt;今天还能推送：&quot;+data.remain+&quot; 个&lt;br/&gt;不是本站而未处理的url列表： &quot;+data.not_same_site+&quot;&lt;br/&gt;不合法的url：&quot;+data.not_valid,{icon:1});
							} else{
								layer.alert(&quot;推送失败了，错误码：&quot;+data.error+&quot;&lt;br/&gt;错误描述：&quot;+data.message,{title: &quot;错误&quot;,icon:2});
							}
						}
					});
				}
			&lt;/script&gt;
		&lt;/div&gt;
	&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="demo">Demo</h2>
<p>在线demo部署在daocloud <a href="http://gobaidu.daoapp.io/">http://gobaidu.daoapp.io/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[go语言学习之零]]></title>
        <id>https://willxuecn.github.io/post/golang-learn-0-20161122/</id>
        <link href="https://willxuecn.github.io/post/golang-learn-0-20161122/">
        </link>
        <updated>2016-11-22T15:18:07.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>很早就听说过google的go语言了，一直没心思去学习新东西，最近不知道抽什么风，突然看到有关go的话题，决定简单入门一下，做不了大神，随便玩玩，以下几篇博客应该都会根据《go语言圣经》一书所写。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>很早就听说过google的go语言了，一直没心思去学习新东西，最近不知道抽什么风，突然看到有关go的话题，决定简单入门一下，做不了大神，随便玩玩，以下几篇博客应该都会根据《go语言圣经》一书所写。</p>
</blockquote>
<!--more-->
<h1 id="学习准备">学习准备</h1>
<hr>
<p>这篇博文不打算讲什么干活，以为我还没学呢(<em><sup>__</sup></em>)，go语言历史什么的也没什么意思，主要放一些最近搜到的资料。</p>
<h2 id="视频">视频</h2>
<p><strong>无闻的三套视频教程</strong></p>
<ul>
<li><a href="https://github.com/Unknwon/go-fundamental-programming">Go编程基础</a></li>
<li><a href="https://github.com/Unknwon/go-web-foundation">Go web基础</a></li>
<li><a href="https://github.com/Unknwon/go-rock-libraries-showcases">Go名库讲解</a></li>
</ul>
<h2 id="书">书</h2>
<ul>
<li><a href="https://github.com/astaxie/build-web-application-with-golang">Go web编程</a> By asta谢</li>
<li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN">Go入门指南</a></li>
<li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example">Golang标准库</a></li>
</ul>
<p>github 真是好东西！还想要什么就去 github 搜。</p>
<p>ps: 这点书够啃几天了。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git Cheat Sheet]]></title>
        <id>https://willxuecn.github.io/post/git-cheat-sheet-20160412/</id>
        <link href="https://willxuecn.github.io/post/git-cheat-sheet-20160412/">
        </link>
        <updated>2016-04-12T14:01:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git">Git</h1>
<hr>
<h2 id="创建">创建</h2>
<p>复制一个已创建的仓库:</p>
<pre><code>$ git clone ssh://user@domain.com/repo.git
</code></pre>
<p>创建一个新的本地仓库:</p>
<pre><code>$ git init
</code></pre>
<hr>
<h2 id="本地修改">本地修改</h2>
<p>显示工作路径下已修改的文件：</p>
<pre><code>$ git status
</code></pre>
<p>显示与上次提交版本文件的不同：</p>
<pre><code>$ git diff
</code></pre>
<p>把当前所有修改添加到下次提交中：</p>
<pre><code>$ git add
</code></pre>
<p>把对某个文件的修改添加到下次提交中：</p>
<pre><code>$ git add -p &lt;file&gt;
</code></pre>
<p>提交本地的所有修改：</p>
<pre><code>$ git commit -a
</code></pre>
<p>提交之前已标记的变化：</p>
<pre><code>$ git commit
</code></pre>
<p>附加消息提交：</p>
<pre><code>$ git commit -m 'message here'
</code></pre>
<p>提交，并将提交时间设置为之前的某个日期:</p>
<pre><code>git commit --date=&quot;`date --date='n day ago'`&quot; -am &quot;Commit Message&quot;
</code></pre>
<p>修改上次提交<br/><br>
<em><sub>请勿修改已发布的提交记录!</sub></em></p>
<pre><code>$ git commit --amend
</code></pre>
<p>把当前分支中未提交的修改移动到其他分支</p>
<pre><code>git stash
git checkout branch2
git stash pop
</code></pre>
<hr>
<h2 id="搜索">搜索</h2>
<p>从当前目录的所有文件中查找文本内容：</p>
<pre><code>$ git grep &quot;Hello&quot;
</code></pre>
<p>在某一版本中搜索文本：</p>
<pre><code>$ git grep &quot;Hello&quot; v2.5
</code></pre>
<hr>
<h2 id="提交历史">提交历史</h2>
<p>从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：</p>
<pre><code>$ git log
</code></pre>
<p>显示所有提交（仅显示提交的hash和message）：</p>
<pre><code>$ git log --oneline
</code></pre>
<p>显示某个用户的所有提交：</p>
<pre><code>$ git log --author=&quot;username&quot;
</code></pre>
<p>显示某个文件的所有修改：</p>
<pre><code>$ git log -p &lt;file&gt;
</code></pre>
<p>谁，在什么时间，修改了文件的什么内容：</p>
<pre><code>$ git blame &lt;file&gt;
</code></pre>
<hr>
<h2 id="分支与标签">分支与标签</h2>
<p>列出所有的分支：</p>
<pre><code>$ git branch
</code></pre>
<p>切换分支：</p>
<pre><code>$ git checkout &lt;branch&gt;
</code></pre>
<p>创建并切换到新分支:</p>
<pre><code>$ git checkout -b &lt;branch&gt;
</code></pre>
<p>基于当前分支创建新分支：</p>
<pre><code>$ git branch &lt;new-branch&gt;
</code></pre>
<p>基于远程分支创建新的可追溯的分支：</p>
<pre><code>$ git branch --track &lt;new-branch&gt; &lt;remote-branch&gt;
</code></pre>
<p>删除本地分支:</p>
<pre><code>$ git branch -d &lt;branch&gt;
</code></pre>
<p>强制删除一个本地分支：<br><br>
<em><sub>将会丢失未合并的修改！</sub></em></p>
<pre><code>$ git branch -D &lt;branch&gt;
</code></pre>
<p>给当前版本打标签：</p>
<pre><code>$ git tag &lt;tag-name&gt;
</code></pre>
<hr>
<h2 id="更新与发布">更新与发布</h2>
<p>列出当前配置的远程端：</p>
<pre><code>$ git remote -v
</code></pre>
<p>显示远程端的信息：</p>
<pre><code>$ git remote show &lt;remote&gt;
</code></pre>
<p>添加新的远程端：</p>
<pre><code>$ git remote add &lt;remote&gt; &lt;url&gt;
</code></pre>
<p>下载远程端版本，但不合并到HEAD中：</p>
<pre><code>$ git fetch &lt;remote&gt;
</code></pre>
<p>下载远程端版本，并自动与HEAD版本合并：</p>
<pre><code>$ git remote pull &lt;remote&gt; &lt;url&gt;
</code></pre>
<p>将远程端版本合并到本地版本中：</p>
<pre><code>$ git pull origin master
</code></pre>
<p>将本地版本发布到远程端：</p>
<pre><code>$ git push remote &lt;remote&gt; &lt;branch&gt;
</code></pre>
<p>删除远程端分支：</p>
<pre><code>$ git push &lt;remote&gt; :&lt;branch&gt; (since Git v1.5.0)
or
git push &lt;remote&gt; --delete &lt;branch&gt; (since Git v1.7.0)
</code></pre>
<p>发布标签:</p>
<pre><code>$ git push --tags
</code></pre>
<hr>
<h2 id="合并与重置">合并与重置</h2>
<p>将分支合并到当前HEAD中：</p>
<pre><code>$ git merge &lt;branch&gt;
</code></pre>
<p>将当前HEAD版本重置到分支中:<br><br>
<em><sub>请勿重置已发布的提交!</sub></em></p>
<pre><code>$ git rebase &lt;branch&gt;
</code></pre>
<p>退出重置:</p>
<pre><code>$ git rebase --abort
</code></pre>
<p>解决冲突后继续重置：</p>
<pre><code>$ git rebase --continue
</code></pre>
<p>使用配置好的merge tool 解决冲突：</p>
<pre><code>$ git mergetool
</code></pre>
<p>在编辑器中手动解决冲突后，标记文件为<code>已解决冲突</code></p>
<pre><code>$ git add &lt;resolved-file&gt;
</code></pre>
<pre><code>$ git rm &lt;resolved-file&gt;
</code></pre>
<hr>
<h2 id="撤销">撤销</h2>
<p>放弃工作目录下的所有修改：</p>
<pre><code>$ git reset --hard HEAD
</code></pre>
<p>移除缓存区的所有文件（i.e. 撤销上次<code>git add</code>）:</p>
<pre><code>$ git reset HEAD
</code></pre>
<p>放弃某个文件的所有本地修改：</p>
<pre><code>$ git checkout HEAD &lt;file&gt;
</code></pre>
<p>重置一个提交（通过创建一个截然不同的新提交）</p>
<pre><code>$ git revert &lt;commit&gt;
</code></pre>
<p>将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：</p>
<pre><code>$ git reset --hard &lt;commit&gt;
</code></pre>
<p>将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：</p>
<pre><code>$ git reset &lt;commit&gt;
</code></pre>
<p>将HEAD重置到上一次提交的版本，并保留未提交的本地修改：</p>
<pre><code>$ git reset --keep &lt;commit&gt;
</code></pre>
<hr>
<h1 id="git-flow">Git-Flow</h1>
<hr>
<h2 id="安装">安装</h2>
<ul>
<li>你需要有一个可以工作的 git 作为前提。</li>
<li>Git flow 可以工作在 OSX, Linux 和 Windows之下</li>
</ul>
<h3 id="osx-homebrew">OSX Homebrew:</h3>
<pre><code>$ brew install git-flow
</code></pre>
<h3 id="osx-macports">OSX Macports:</h3>
<pre><code>$ port install git-flow
</code></pre>
<h3 id="linux">Linux:</h3>
<pre><code>$ apt-get install git-flow
</code></pre>
<h3 id="windows-cygwin">Windows (Cygwin):</h3>
<p>安装 git-flow, 你需要 wget 和 util-linux。</p>
<pre><code>$ wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash
</code></pre>
<hr>
<h2 id="开始">开始</h2>
<ul>
<li>为了自定义你的项目，Git flow 需要初始化过程。</li>
<li>使用 git-flow，从初始化一个现有的 git 库内开始。</li>
<li>初始化，你必须回答几个关于分支的命名约定的问题。建议使用默认值。</li>
</ul>
<pre><code>git flow init
</code></pre>
<hr>
<h2 id="特性">特性</h2>
<ul>
<li>为即将发布的版本开发新功能特性。</li>
<li>这通常只存在开发者的库中。</li>
</ul>
<h3 id="创建一个新特性">创建一个新特性:</h3>
<p>下面操作创建了一个新的feature分支，并切换到该分支</p>
<pre><code>git flow feature start MYFEATURE
</code></pre>
<h3 id="完成新特性的开发">完成新特性的开发:</h3>
<p>完成开发新特性。这个动作执行下面的操作：</p>
<ol>
<li>合并 MYFEATURE 分支到 'develop'</li>
<li>删除这个新特性分支</li>
<li>切换回 'develop' 分支</li>
</ol>
<pre><code>git flow feature finish MYFEATURE
</code></pre>
<h3 id="发布新特性">发布新特性:</h3>
<p>你是否合作开发一项新特性？<br>
发布新特性分支到远程服务器，所以，其它用户也可以使用这分支。</p>
<pre><code>git flow feature publish MYFEATURE
</code></pre>
<h3 id="取得一个发布的新特性分支">取得一个发布的新特性分支:</h3>
<p>取得其它用户发布的新特性分支。</p>
<pre><code>git flow feature pull origin MYFEATURE
</code></pre>
<h3 id="追溯远端上的特性">追溯远端上的特性:</h3>
<p>通过下面命令追溯远端上的特性</p>
<pre><code>git flow feature track MYFEATURE
</code></pre>
<hr>
<h2 id="做一个release版本">做一个release版本</h2>
<ul>
<li>支持一个新的用于生产环境的发布版本。</li>
<li>允许修正小问题，并为发布版本准备元数据。</li>
</ul>
<h3 id="开始创建release版本">开始创建release版本:</h3>
<ul>
<li>开始创建release版本，使用 git flow release 命令。</li>
<li>'release' 分支的创建基于 'develop' 分支。</li>
<li>你可以选择提供一个 [BASE]参数，即提交记录的 sha-1 hash 值，来开启动 release 分支。</li>
<li>这个提交记录的 sha-1 hash 值必须是'develop' 分支下的。</li>
</ul>
<pre><code>git flow release start RELEASE [BASE]
</code></pre>
<p>创建 release 分支之后立即发布允许其它用户向这个 release 分支提交内容是个明智的做法。命令十分类似发布新特性：</p>
<pre><code>git flow release publish RELEASE
</code></pre>
<p>(你可以通过<br>
<code>git flow release track RELEASE</code> 命令追溯远端的 release 版本)</p>
<h3 id="完成-release-版本">完成 release 版本:</h3>
<p>完成 release 版本是一个大 git 分支操作。它执行下面几个动作：</p>
<ol>
<li>归并 release 分支到 'master' 分支。</li>
<li>用 release 分支名打 Tag</li>
<li>归并 release 分支到 'develop'</li>
<li>移除 release 分支。</li>
</ol>
<pre><code>git flow release finish RELEASE
</code></pre>
<p>不要忘记使用<code>git push --tags</code>将tags推送到远端</p>
<hr>
<h2 id="紧急修复">紧急修复</h2>
<p>紧急修复来自这样的需求：生产环境的版本处于一个不预期状态，需要立即修正。有可能是需要修正 master 分支上某个 TAG 标记的生产版本。</p>
<h3 id="开始-git-flow-紧急修复">开始 git flow 紧急修复:</h3>
<p>像其它 git flow 命令一样, 紧急修复分支开始自：</p>
<pre><code>$ git flow hotfix start VERSION [BASENAME]
</code></pre>
<p>VERSION 参数标记着修正版本。你可以从 <code>[BASENAME]开始，</code>[BASENAME]`为finish release时填写的版本号</p>
<h3 id="完成紧急修复">完成紧急修复:</h3>
<p>当完成紧急修复分支，代码归并回 develop 和 master 分支。相应地，master 分支打上修正版本的 TAG。</p>
<pre><code>git flow hotfix finish VERSION
</code></pre>
<hr>
<h2 id="commands">Commands</h2>
<figure data-type="image" tabindex="1"><img src="http://willxue.cn-bj.ufileos.com/git-flow-commands.png" alt="git-flow-commands" loading="lazy"></figure>
<h1 id="来源">来源</h1>
<p><a href="https://github.com/ArslanBilal/Git-Cheat-Sheet/blob/master/other-sheets/git-cheat-sheet-zh.md">ArslanBilal</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java.lang.OutOfMemoryError: PermGen space]]></title>
        <id>https://willxuecn.github.io/post/java-lang-OutOfMemoryError-PermGen-space-20160406/</id>
        <link href="https://willxuecn.github.io/post/java-lang-OutOfMemoryError-PermGen-space-20160406/">
        </link>
        <updated>2016-04-05T16:01:18.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>在vps上部署多个应用时，报了 <code>java.lang.OutOfMemoryError: PermGen space</code> 错误，由于没有深入了解过jvm，只能在网上搜到了一些解决办法。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>在vps上部署多个应用时，报了 <code>java.lang.OutOfMemoryError: PermGen space</code> 错误，由于没有深入了解过jvm，只能在网上搜到了一些解决办法。</p>
</blockquote>
<!--more-->
<h1 id="简述">简述</h1>
<hr>
<p>java.lang.OutOfMemoryError: PermGen space<br>
PermGen space的全称是Permanent Generation space,是指内存的永久保存区域, 这块内存主要是被JVM存放Class和Meta信息的,Class在被Loader时就会被放到PermGen space中, 它和存放类实例(Instance)的Heap区域不同,GC(Garbage Collection)不会在主程序运行期对 PermGen space进行清理，所以如果你的应用中有很多CLASS的话,就很可能出现PermGen space错误, 这种错误常见在web服务器对JSP进行pre compile的时候。如果你的WEB APP下都用了大量的第三方jar, 其大小超过了jvm默认的大小(4M)那么就会产生此错误信息了。</p>
<h1 id="解决办法">解决办法</h1>
<hr>
<p>这里以windows下tomcat环境为例，其它WEB服务器如jboss,weblogic等是同一个道理。</p>
<ol>
<li>MyEclipse/eclipse 中报 PermGen space。<br>
window--&gt;preferences--&gt;Myclipse--&gt;Servers--&gt;Tomcat--&gt;JDK,设置jdk参数。</li>
</ol>
<pre><code>-Xms512m -Xmx1024m -XX:PermSize=128M -XX:MaxPermSize=256m
</code></pre>
<pre><code>**参数介绍：**
</code></pre>
<pre><code>-Xms512m  #JVM初始分配的堆内存
-Xmx1024m  #JVM最大允许分配的堆内存，按需分配
-XX:PermSize=128M  #JVM初始分配的非堆内存
-XX:MaxPermSize=256M  #JVM最大允许分配的非堆内存，按需分配
</code></pre>
<ol start="2">
<li>手动设置MaxPermSize大小，如果是linux系统，修改<code>TOMCAT_HOME/bin/catalina.sh</code>，如果是windows系统，修改<code>TOMCAT_HOME/bin/catalina.bat</code>，在</li>
</ol>
<pre><code>echo &quot;Using CATALINA_BASE: $CATALINA_BASE&quot; 
</code></pre>
<pre><code>上面加入以下行：
</code></pre>
<pre><code>JAVA_OPTS=&quot;-Xms512m -Xmx1024m -XX:PermSize=128M -XX:MaxPermSize=256m&quot;
</code></pre>
<pre><code>**建议：将相同的第三方jar文件移置到tomcat/lib目录下，这样可以达到减少jar 文档重复占用内存的目的。**
</code></pre>
<ol start="3">
<li>在windows中，如果以服务方式启动，这个一般在服务器上用的比较多，修改注册表的数据。<br>
找到 <code>HKEY_LOCAL_MACHINE/SOFTWARE/Apache Software Foundation/Procrun 2.0/Tomcat7/Parameters/Java</code> 或<code>HKEY_LOCAL_MACHINE/SOFTWARE/Wow6432Node/Apache Software Foundation/Procrun 2.0/Tomcat7/Parameters/Java</code>，修改JvmMs和JvmMx的值。或者直接修改Options的参数，加入 <code>-Xms512m -Xmx1024m -XX:PermSize=128M -XX:MaxPermSize=256m</code><br>
<img src="http://7xrz9n.com1.z0.glb.clouddn.com/java-tomcat.png" alt="" loading="lazy"><br>
之前还真不知道windows服务启动和startup.bat启动的区别。 windows服务器启动是在注册表中加载参数，startup.bat启动是在catalina.bat加载参数。</li>
</ol>
<h1 id="参考">参考</h1>
<hr>
<p><a href="http://www.cnblogs.com/mingforyou/archive/2012/03/03/2378143.html">http://www.cnblogs.com/mingforyou/archive/2012/03/03/2378143.html</a><br>
<a href="http://www.cnblogs.com/xwdreamer/archive/2011/11/21/2296930.html">http://www.cnblogs.com/xwdreamer/archive/2011/11/21/2296930.html</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在VPS上部署Java项目，绑定多个域名]]></title>
        <id>https://willxuecn.github.io/post/deploy-javaweb-to-vps-20160331/</id>
        <link href="https://willxuecn.github.io/post/deploy-javaweb-to-vps-20160331/">
        </link>
        <updated>2016-03-31T15:34:31.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>工作不到一年，以前又异常懒惰，对服务器方面一向没有什么认知，听名字以为很高级，刚开始有些不知所措，从网上搜索了一些知识，总算有了一定的了解，但也只能算刚刚入门，记录一下。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>工作不到一年，以前又异常懒惰，对服务器方面一向没有什么认知，听名字以为很高级，刚开始有些不知所措，从网上搜索了一些知识，总算有了一定的了解，但也只能算刚刚入门，记录一下。</p>
</blockquote>
<!--more-->
<h1 id="vps">VPS</h1>
<blockquote>
<p>VPS（Virtual Private Server 虚拟专用服务器）技术，将一部服务器分割成多个虚拟专享服务器的优质服务。每个VPS都可分配独立公网IP地址、独立操作系统、实现不同VPS间磁盘空间、内存、CPU资源、进程和系统配置的隔离，为用户和应用程序模拟出“独占”使用计算资源的体验。VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。</p>
</blockquote>
<p>简单来说就是出于成本考虑，租用服务器花费太高，服务商将服务器分割成若干个“服务器”，这些个“服务器”有可以享有独立的ip，os等资源，比较适合中小企业建站需求。</p>
<h2 id="vps上部署java项目">VPS上部署Java项目</h2>
<p>以前认知上一直有个误区，以为服务器都很复杂，而现在大多数服务器的环境全是php的，我要部署Java应用，感觉无从下手，其实服务器和我们平常用的计算机没有什么区别，只是要24小时运行，联网，为外界提供访问。所以下面就好理解了。<br>
我用的vps装的是Windows server 2008 R2，以前运行过asp项目，所以安装有IIS，因为IIS已经占用了80端口，所以再要tomcat运行javaweb程序的话，搜到了以下几种解决方法：</p>
<ol>
<li>我的情况，不需要asp程序了，将IIS卸载释放80端口。</li>
<li>同时运行asp和jsp程序，需要将IIS和tomcat进行整合，网上有很多教程，我很懒，没弄！</li>
<li>好像也可以用nginx反向代理，没深入研究，这几天打算学一下nginx呢。</li>
</ol>
<p>我就介绍下第一种情况把（懒癌患者）！<br>
安装 <code>jdk1.7</code> ， <code>tomcat7</code> 配置好环境变量，这些基础的就不说了，就和在自己电脑上一样安装。</p>
<ul>
<li>将要运行的项目用eclipse打成war包，上传到vps上，放到 <code>tomcat\webapps</code>下或者其他目录也行，为了方便我就放到webapps下了。</li>
<li>修改 <code>tomcat\conf</code> 下的 <code>server.xml</code> 文件修改端口为80，这样输入网址的时候就不用加上端口了。</li>
</ul>
<pre><code>#将端口修改成80 URIEncoding=&quot;UTF-8&quot;是防止乱码的
&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot; /&gt;
</code></pre>
<ul>
<li>绑定域名，还是修改 <code>tomcat\conf</code> 下的 <code>server.xml</code> 文件。</li>
</ul>
<pre><code>&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;www.abc.com&quot;&gt;
	&lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;
	&lt;/Realm&gt;
	&lt;Host name=&quot;www.abc.com&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;
		&lt;Context path=&quot;&quot; docBase=&quot;abc&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt;
		&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;
	&lt;/Host&gt;
	&lt;Host name=&quot;www.bcd.com&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;
		&lt;Context path=&quot;&quot; docBase=&quot;bcd&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt;
		&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;
		&lt;Alias&gt;bcd.com&lt;/Alias&gt;
	&lt;/Host&gt;
&lt;/Engine&gt;
</code></pre>
<p>配置说明：</p>
<ul>
<li><code>defaultHost=&quot;www.abc.com&quot;</code> 表示访问该tomcat默认进入的主机。也可以是localhost 不改，这样别人访问你的ip的话会进入tomcat设置界面。</li>
<li>Host 的 name:表示该主机绑定的域名,也可以是公网ip,如果绑定localhost则可以通过在浏览器中输入localhost访问该Host。Host的 appBase:表示该主机绑定的文件存放路径,可以使用相对路径或绝对路径如：<code>d:/abc</code>，tomcat会默认部署该目录里的应用。</li>
<li><code>&lt;Context path=&quot;&quot; docBase=&quot;abc&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt;</code> 如果不加这句，就会默认访问appBase下的ROOT文件夹下的项目。path是说明虚拟目录的名字，如果你要只输入ip地址就显示主页，则该键值留为空；docBase是虚拟目录的路径，它默认的是$tomcat/webapps/ROOT目录，我的项目在webapps\abc目录，让该目录作为我的默认目录。debug和reloadable一般都分别设置成0和true。</li>
<li>绑定多个域名的话就在加一个host标签。</li>
<li>多个域名同时访问一个项目，比如www.bcd.com和bcd.com都访问到bcd项目，host里加入<Alias>标签，A大写。</li>
</ul>
<p>现在重启tomcat浏览器输入地址就可以访问到要部署的项目了。<br>
为了方便可以把tomcat加入windows服务，直接打开 <code>tomcat\bin\service.bat</code> 就会自动加入服务了。</p>
<h1 id="问题">问题</h1>
<ol>
<li>域名解析到服务器的ip了，tomcat也配置好了，还是访问不了。<br>
首先，域名解析到国内的vps都得备案，还有可能vps提供商的后台需要把域名加入白名单才能访问。</li>
<li>我还没发现其他的问题。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo系列教程之五：hexo博客同时托管在github和coding]]></title>
        <id>https://willxuecn.github.io/post/Hexo-5-20160325/</id>
        <link href="https://willxuecn.github.io/post/Hexo-5-20160325/">
        </link>
        <updated>2016-03-24T16:33:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<hr>
<p>之前查资料发现国内也有个代码托管平台gitcafe，和github很像，打开官网发现gitcafe已经被coding收购了，我们可以把博客托管在coding上，毕竟github服务器在国外可能有所限制（测试时发现访问速度上没什么区别，有时coding还不如github访问快呢）。</p>
<h1 id="正文">正文</h1>
<hr>
<blockquote>
<p>一切为了折腾啊！</p>
</blockquote>
<h2 id="注册coding创建项目">注册coding，创建项目</h2>
<p>注册什么的我就不说了，有点智商的人都会。进入后台，创建新项目。项目名要和用户名一样，这样访问 <code>username.coding.me</code> 就会进入项目了。</p>
<figure data-type="image" tabindex="1"><img src="http://willxue.cn-bj.ufileos.com/hexo52.png" alt="willxue" loading="lazy"></figure>
<h2 id="配置ssh密钥">配置SSH密钥</h2>
<p>可以用以前github生成的，参考前面教程。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo53.png" alt="willxue" loading="lazy"><br>
测试：</p>
<pre><code>ssh -T git@git.coding.net
</code></pre>
<p>看到下图所示，表示成功了。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo54.png" alt="willxue" loading="lazy"></p>
<h2 id="修改配置文件">修改配置文件</h2>
<p>找到hexo目录下站点配置文件 <code>_config.yml</code></p>
<pre><code>deploy:
  type: git
  repo:
	  github: git@github.com:imwillxue/imwillxue.github.io.git,master
	  coding: git@git.coding.net:willxue/willxue.git,master

</code></pre>
<p>可能要安装插件：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>然后，测试一下吧。</p>
<pre><code>hexo clean
hexo g
hexo d
</code></pre>
<h2 id="开启pages服务">开启pages服务</h2>
<p><img src="http://willxue.cn-bj.ufileos.com/hexo55.png" alt="willxue" loading="lazy"><br>
我开启的master分支的。<br>
开启以后访问 <a href="http://willxue.coding.me">http://willxue.coding.me</a> 测试一下看看成功了吗。</p>
<h2 id="绑定域名">绑定域名</h2>
<p>要实现国内访问跳转到coding，国外访问跳转到github，可以这样设置。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo56.png" alt="willxue" loading="lazy"><br>
<strong>注： 我的这种配置要在github根目录新建个CNAME文件，里面填上<code>willxue.top</code>。另外在coding的pages里要绑定域名。</strong></p>
<p>今天又弄了几个免费顶级域名tk ml cf ga 。感觉速度上并没有很慢。</p>
<p>可以用<a href="http://ping.chinaz.com/">站长之家</a>工具测试一下。</p>
<h1 id="最后">最后</h1>
<p>参考了一些前辈的文章。还有很多百度google的，链接忘了，同样感谢。<br>
<a href="http://opiece.me/2016/03/13/push-hexo-to-github-and-coding/">http://opiece.me/2016/03/13/push-hexo-to-github-and-coding/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo系列教程之四：hexo的配置和优化]]></title>
        <id>https://willxuecn.github.io/post/Hexo-4-20160324/</id>
        <link href="https://willxuecn.github.io/post/Hexo-4-20160324/">
        </link>
        <updated>2016-03-24T14:42:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<hr>
<p>前面写了点hexo主题next的一些简单配置，怎奈本人实在太懒，言语表达能力欠缺，写的文章质量太低，态度也有点问题，希望自己能慢慢坚持，努力改正，争取每天都写点。</p>
<h1 id="正文">正文</h1>
<hr>
<blockquote>
<p>下面进入正题，现在很多主题已经把很多功能都合并进去，所以操作起来相对简单一些了，以下介绍包含但不限于<code>next</code>主题。</p>
</blockquote>
<h2 id="多说评论">多说评论</h2>
<p>给站点加入多说评论功能，基本所有主题都集成了，说一下基本操作，以及一些个性化设置。</p>
<h3 id="添加多说评论">添加多说评论</h3>
<ol>
<li>
<p>打开<a href="http://duoshuo.com/">多说</a>首页,点 <strong>我要安装</strong> ，登陆多说（微博或qq快捷登录），创建站点。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo42.png" alt="willxue" loading="lazy"></p>
</li>
<li>
<p>按下图进行输入创建评论站点。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo43.png" alt="willxue" loading="lazy"></p>
</li>
<li>
<p>创建完以后进入管理后台，在左侧菜单栏里找到工具，右侧代码里看到<code>short_name</code>，也就是刚才输入的多说域名。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo44.png" alt="willxue" loading="lazy"></p>
</li>
<li>
<p>打开 <code>主题配置文件</code>，找到 <code>duoshuo_shortname</code>，写到后面。不同主题可能名字不一样，操作都是一样的。</p>
</li>
</ol>
<pre><code>duoshuo_shortname: imwillxue
</code></pre>
<h3 id="修改评论框css样式">修改评论框CSS样式</h3>
<p>CSS好的可以自己写，详见<a href="http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017">多说文档</a>。当然google一堆，我的就是google的，前端太烂。下面是我的代码，具体样式评论查看。</p>
<pre><code>/*Head Start*/
#ds-thread #ds-reset ul.ds-comments-tabs li.ds-tab a.ds-current {
    border: 0px;
    color: #6D6D6B;
    text-shadow: none;
    background: #F3F3F3;
}

#ds-thread #ds-reset .ds-highlight {
    font-family: Microsoft YaHei, &quot;Helvetica Neue&quot;, Helvetica, Arial, Sans-serif;
    ;font-size: 100%;
    color: #6D6D6B !important;
}

#ds-thread #ds-reset ul.ds-comments-tabs li.ds-tab a.ds-current:hover {
    color: #696a52;
    background: #F2F2F2;
}

#ds-thread #ds-reset a.ds-highlight:hover {
    color: #696a52 !important;
}

#ds-thread {
    padding-left: 15px;
}

#ds-thread #ds-reset li.ds-post,#ds-thread #ds-reset #ds-hot-posts {
    overflow: visible;
}

#ds-thread #ds-reset .ds-post-self {
    padding: 10px 0 10px 10px;
}

#ds-thread #ds-reset li.ds-post,#ds-thread #ds-reset .ds-post-self {
    border: 0 !important;
}

#ds-reset .ds-avatar, #ds-thread #ds-reset ul.ds-children .ds-avatar {
    top: 15px;
    left: -20px;
    padding: 5px;
    width: 36px;
    height: 36px;
    box-shadow: -1px 0 1px rgba(0,0,0,.15) inset;
    border-radius: 46px;
    background: #FAFAFA;
}

#ds-thread .ds-avatar a {
    display: inline-block;
    padding: 1px;
    width: 32px;
    height: 32px;
    border: 1px solid #b9baa6;
    border-radius: 50%;
    background-color: #fff !important;
}

#ds-thread .ds-avatar a:hover {
}

#ds-thread .ds-avatar &gt; img {
    margin: 2px 0 0 2px;
}

#ds-thread #ds-reset .ds-replybox {
    box-shadow: none;
}

#ds-thread #ds-reset ul.ds-children .ds-replybox.ds-inline-replybox a.ds-avatar,
#ds-reset .ds-replybox.ds-inline-replybox a.ds-avatar {
    left: 0;
    top: 0;
    padding: 0;
    width: 32px !important;
    height: 32px !important;
    background: none;
    box-shadow: none;
}

#ds-reset .ds-replybox.ds-inline-replybox a.ds-avatar img {
    width: 32px !important;
    height: 32px !important;
    border-radius: 50%;
}

#ds-reset .ds-replybox a.ds-avatar,
#ds-reset .ds-replybox .ds-avatar img {
    padding: 0;
    width: 32px !important;
    height: 32px !important;
    border-radius: 5px;
}

#ds-reset .ds-avatar img {
    width: 32px !important;
    height: 32px !important;
    border-radius: 32px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.22);
    -webkit-transition: .8s all ease-in-out;
    -moz-transition: .4s all ease-in-out;
    -o-transition: .4s all ease-in-out;
    -ms-transition: .4s all ease-in-out;
    transition: .4s all ease-in-out;
}

.ds-post-self:hover .ds-avatar img {
    -webkit-transform: rotateX(360deg);
    -moz-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg);
}

#ds-thread #ds-reset .ds-comment-body {
    -webkit-transition-delay: initial;
    -webkit-transition-duration: 0.4s;
    -webkit-transition-property: all;
    -webkit-transition-timing-function: initial;
    background: #F7F7F7;
    padding: 15px 15px 15px 47px;
    border-radius: 5px;
    box-shadow: #B8B9B9 0 1px 3px;
    border: white 1px solid;
}

#ds-thread #ds-reset ul.ds-children .ds-comment-body {
    padding-left: 15px;
}

#ds-thread #ds-reset .ds-comment-body p {
    color: #787968;
}

#ds-thread #ds-reset .ds-comments {
    border-bottom: 0px;
}

#ds-thread #ds-reset .ds-powered-by {
    display: none;
}

#ds-thread #ds-reset .ds-comments a.ds-user-name {
    font-weight: normal;
    color: #3D3D3D !important;
}

#ds-thread #ds-reset .ds-comments a.ds-user-name:hover {
    color: #D32 !important;
}

#ds-thread #ds-reset #ds-bubble {
    display: none !important;
}

#ds-thread #ds-reset #ds-hot-posts {
    border: 0;
}

#ds-reset #ds-hot-posts .ds-gradient-bg {
    background: none;
}

#ds-thread #ds-reset .ds-comment-body:hover {
    background-color: #F1F1F1;
    -webkit-transition-delay: initial;
    -webkit-transition-duration: 0.4s;
    -webkit-transition-property: all;
    -webkit-transition-timing-function: initial;
}
/*Head End*/
</code></pre>
<p>打开多说管理后台，把上面的代码复制进去。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo45.png" alt="willxue" loading="lazy"></p>
<h3 id="显示ua及博主">显示UA及博主</h3>
<p>显示ua功能，next主题已经集成了，只需要在配置文件设置一下就行了，效果看下图。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo46.png" alt="willxue" loading="lazy"></p>
<pre><code>duoshuo_info:
  ua_enable: true  #是否显示ua
  admin_enable: true #是否显示博主
  user_id: 6262178932196377345  #多说用户id
  admin_nickname: 神 #博主昵称自定义
</code></pre>
<p><strong>注： 多说id就是打开多说个人中心<a href="http://duoshuo.com/settings/">http://duoshuo.com/settings/</a>，点击你的用户名地址会出现一串数字就是多说id。</strong></p>
<h4 id="其他方法">其他方法</h4>
<p>对于很多没有集成这个功能的主题，可以参考一下文章或插件。<br>
多说UA插件 - <a href="http://gerald.top/code/duoshuo-ua">http://gerald.top/code/duoshuo-ua</a><br>
ua-parser-js - <a href="https://github.com/faisalman/ua-parser-js">https://github.com/faisalman/ua-parser-js</a><br>
另外，还有本地化embed.js的，有兴趣的可以google一下。</p>
<h2 id="rss和sitemap">RSS和sitemap</h2>
<ol>
<li>安装RSS和sitemap插件</li>
</ol>
<pre><code>npm install hexo-generator-feed --save
npm install hexo-generator-sitemap --save
</code></pre>
<ol start="2">
<li>开启RSS和sitemap功能，编辑站点配置文件 <code>hexo/_config.yml</code></li>
</ol>
<pre><code>feed: 
  type: atom  #feed 类型 
  path: atom.xml  #rss 路径 
  limit: 20  #在 rss 中最多生成的文章数(0显示所有)
</code></pre>
<p>NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 <code>主题配置文件</code>，设定 <code>rss</code> 字段的值：</p>
<ul>
<li>false：禁用 RSS，不在页面上显示 RSS 连接。</li>
<li>留空：使用 Hexo 生成的 Feed 链接。</li>
<li>具体的链接地址：适用于已经烧制过 Feed 的情形。</li>
</ul>
<p>我们这里留空就行了。</p>
<p><strong>将生成出来的sitemap.xml文件提交给搜索引擎，后面介绍。</strong></p>
<h2 id="腾讯公益404页面">腾讯公益404页面</h2>
<p>在 <code>hexo/source</code> 文件夹下新建404.html，推荐使用腾讯公益404。</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

	&lt;head&gt;
		&lt;meta charset=&quot;UTF-8&quot;&gt;
		&lt;title&gt;404&lt;/title&gt;
	&lt;/head&gt;

	&lt;body&gt;
		&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; 
		charset=&quot;utf-8&quot; homePageUrl=&quot;http://willxue.top&quot; homePageName=&quot;我的博客&quot;&gt;&lt;/script&gt;
	&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<h1 id="常见错误">常见错误</h1>
<hr>
<ul>
<li>修改配置文件时注意 <code>YAML</code> 语法，参数冒号: 后一定要留空格</li>
<li>中文乱码请修改文件编码格式为UTF-8</li>
<li>GitHub同步慢或者失败请使用翻墙代理加速</li>
</ul>
<h1 id="最后">最后</h1>
<hr>
<p>不总结了，且看下回分解。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo系列教程之三：next主题的配置和优化]]></title>
        <id>https://willxuecn.github.io/post/Hexo-3-20160322/</id>
        <link href="https://willxuecn.github.io/post/Hexo-3-20160322/">
        </link>
        <updated>2016-03-22T13:56:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<hr>
<p>前面介绍了怎么用hexo搭建博客，今天就谢谢主题的配置和优化。<br>
因为对hexo默认的主题不是很满意，对于追逐个性的我当然不甘于此，于是开启了折腾之路。<br>
对于hexo主题的选择纯凭个人喜好，这一点前面我也有提到，具体可以参考我的博文-<a href="http://willxue.com/post/Hexo-0-20160319/">Hexo系列教程之零</a>。我现在的主题是<code>yilia</code>，已经配置好了，为了写这篇文章，我准备尝试一下<code>next</code>主题。</p>
<h1 id="正文">正文</h1>
<hr>
<blockquote>
<p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置有主题作者提供，主要用于配置主题相关的选项。<br>
为了描述方便，在以下说明中，将前者称为 <code>站点配置文件</code>， 后者称为 <code>主题配置文件</code>。</p>
</blockquote>
<h2 id="安装-next">安装 NexT</h2>
<p>具体安装非常简单，你可以直接下载将文件拷贝到hexo下themes目录里，也可以在hexo目录下右键git bash通过命令：</p>
<pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre>
<p>next主题会自动下载到themes目录下。</p>
<h2 id="启用主题">启用主题</h2>
<p>与所有 Hexo 主题启用的模式一样。 当 <code>克隆/下载</code> 完成后，打开 <code>站点配置文件</code>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code> 。</p>
<pre><code>theme: next
</code></pre>
<p>然后可以验证一下，打开本地服务：</p>
<pre><code>hexo s
</code></pre>
<p>浏览器输入 <code>http://localhost:4000</code> 。</p>
<blockquote>
<p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://willxue.cn-bj.ufileos.com/hexo32.png" alt="next" loading="lazy"></figure>
<h2 id="配置">配置</h2>
<p>首先我们看看 <code>站点配置文件</code> 的配置 <code>F:\hexo\_config.yml</code> 。</p>
<pre><code># Hexo Configuration
## Docs: https://hexo.io/docs/configuration.html
## Source: https://github.com/hexojs/hexo/
# Site 网站
title: 为学   #网站标题
subtitle: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。   #网站副标题
description: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。   #网站描述
author: willxue   #您的名字
language: zh-CN   #网站使用的语言
timezone:           #网站时区。Hexo 默认使用您电脑的时区

# URL 网址
## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。
url: http://willxue.com
permalink: :year/:month/:day/:title/    #生成文件名字的格式我改成blog/:title:year:month:day/
permalink_defaults:

# Directory 目录配置
source_dir: source   #源文件夹，这个文件夹用来存放内容。
public_dir: public   #公共文件夹，这个文件夹用于存放生成的站点文件。
tag_dir: tags   #标签文件夹
archive_dir: archives   #归档文件夹
category_dir: categories   #分类文件夹
code_dir: downloads/code    #nclude code 文件夹
i18n_dir: :lang   #国际化（i18n）文件夹
skip_render:   #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。

# Writing 文章
new_post_name: :title.md   # 新建文章默认文件名
default_layout: post   # 默认布局
titlecase: false   # Transform title into titlecase
external_link: true   # 在新标签中打开一个外部链接，默认为true
filename_case: 0   #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。
render_drafts: false   #是否渲染_drafts目录下的文章，默认为false
post_asset_folder: false   #启动 Asset 文件夹
relative_link: false   #把链接改为与根目录的相对位址，默认false
future: true   #显示未来的文章，默认false
highlight:   #代码块的设置 
  enable: true
  line_number: true
  auto_detect: false
  tab_replace:

# Category &amp; Tag   分类和标签的设置
default_category: uncategorized   #默认分类
category_map:   #分类别名
tag_map:   #标签别名

# Date / Time format
## Hexo uses Moment.js to parse and display date
## You can customize the date format as defined in
## http://momentjs.com/docs/#/displaying/format/
date_format: YYYY-MM-DD
time_format: HH:mm:ss

# Pagination 分页
## Set per_page to 0 to disable pagination
per_page: 10   #每页显示的文章量 (0 = 关闭分页功能)
pagination_dir: page   #分页目录

# Extensions
## Plugins: https://hexo.io/plugins/
## Themes: https://hexo.io/themes/
theme: next

feed:
  type: atom       #feed 类型 (atom/rss2)
  path: atom.xml   #rss 路径
  limit: 20        #在 rss 中最多生成的文章数(0显示所有)

# Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy: 
type: git 
  repository: https://github.com/imwillxue/imwillxue.github.com.git 
  branch: master
</code></pre>
<p>上面有注释，看完也基本没什么问题了，这些基本上不用怎么改，个性化主要还是要修改主题的配置文件 <code>F:\hexo\themes\next\_config.yml</code>。</p>
<pre><code># ---------------------------------------------------------------
# Site Information Settings
# ---------------------------------------------------------------

# Place your favicon.ico to /source directory.
favicon: /favicon.ico   #站标  可以放在hexo文件夹下的/source里

# Set default keywords (Use a comma to separate)
keywords: &quot;为学,willxue,willxue.top&quot;  #网站关键字

# Set rss to false to disable feed link.
# Leave rss as empty to use site's feed link.
# Set rss to specific value if you have burned your feed already.
rss:  #rss这里不设置 引文站点配置文件已经配置了 需要安装插件

# Specify the date when the site was setup
since: 1990  #网站时间 从xx开始 类似 1990-2016


# ---------------------------------------------------------------
# Menu Settings
# ---------------------------------------------------------------

# When running hexo in a subdirectory (e.g. domain.tld/blog)
# Remove leading slashes ( &quot;/archives&quot; -&gt; &quot;archives&quot; )
menu: #菜单路径设置 如果hexo在二级目录放置要去掉/
  home: /
  archives: /archives #归档
  tags: /tags #标签
  categories: /categories  #分类
  about: /about #关于我
  commonweal: /404.html  #公益404


# Enable/Disable menu icons.
# Icon Mapping:
#   Map a menu item to a specific FontAwesome icon name.
#   Key is the name of menu item and value is the name of FontAwsome icon.
#   When an question mask icon presenting up means that the item has no mapping icon.
menu_icons:  #icon图标
  enable: true
  # Icon Mapping.
  home: home
  about: user
  categories: th
  tags: tags
  archives: archive
  commonweal: heartbeat




# ---------------------------------------------------------------
# Scheme Settings
# ---------------------------------------------------------------

# Schemes  #next的三个scheme
#scheme: Muse
#scheme: Mist
scheme: Pisces



# ---------------------------------------------------------------
# Sidebar Settings
# ---------------------------------------------------------------


# Social links   #社交链接
social:
  GitHub: 
  Weibo:
  Others:

# Social Icons  #社交的图标
social_icons:
  enable: true
  # Icon Mappings
  GitHub: github
  Twitter: twitter
  Weibo: weibo


# Sidebar Avatar
# in theme directory(source/images): /images/avatar.jpg
# in site  directory(source/uploads): /uploads/avatar.jpg
# default : /images/default_avatar.jpg
avatar: http://willxue.cn-bj.ufileos.com/logo.png #头像


# TOC in the Sidebar  #文章自动显示目录
toc:
  enable: true

  # Automatically add list number to toc.  #目录是否自动显示数字序号
  number: false


# Creative Commons 4.0 International License.
# http://creativecommons.org/  #自由协议
# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero
#creative_commons: by-nc-sa
#creative_commons:

sidebar:
  # Sidebar Position, available value: left | right
  position: left
  #position: right

  # Sidebar Display, available value:
  #  - post    expand on posts automatically. Default.
  #  - always  expand for all pages automatically
  #  - hide    expand only when click on the sidebar toggle icon.
  #  - remove  Totally remove sidebar including sidebar toggle icon.
  display: post
  #display: always
  #display: hide
  #display: remove



# ---------------------------------------------------------------
# Misc Theme Settings
# ---------------------------------------------------------------

# Custom Logo.
# !!Only available for Default Scheme currently.
# Options:
#   enabled: [true/false] - Replace with specific image
#   image: url-of-image   - Images's url
custom_logo:
  enabled: false
  image:


# Code Highlight theme
# Available value:
#    normal | night | night eighties | night blue | night bright
# https://github.com/chriskempson/tomorrow-theme
highlight_theme: night

# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.
scroll_to_more: true

# Automatically Excerpt
auto_excerpt:
  enable: false
  length: 150

# Use Lato font
use_font_lato: true



# ---------------------------------------------------------------
# Third Party Services Settings
# ---------------------------------------------------------------

# MathJax Support
mathjax:


# Swiftype Search API Key
#swiftype_key:

# Baidu Analytics ID
#baidu_analytics:

# Duoshuo ShortName
duoshuo_shortname: imwillxue

# Disqus
#disqus_shortname:

# Baidu Share
# Available value:
#    button | slide
#baidushare:
##  type: button

# Share
#jiathis:
#add_this_id:

# Share
duoshuo_share: true

# Google Webmaster tools verification setting
# See: https://www.google.com/webmasters/
#google_site_verification:


# Google Analytics
#google_analytics:

# CNZZ count
#cnzz_siteid:


# Make duoshuo show UA
# user_id must NOT be null when admin_enable is true!
# you can visit http://dev.duoshuo.com get duoshuo user id.
duoshuo_info:
  ua_enable: true
  admin_enable: true
  user_id: 6262178932196377345
  admin_nickname: 神


# Facebook SDK Support.
# https://github.com/iissnan/hexo-theme-next/pull/410
facebook_sdk:
  enable: false
  app_id:       #&lt;app_id&gt;
  fb_admin:     #&lt;user_id&gt;
  like_button:  #true
  webmaster:    #true


# Show number of visitors to each article.
# You can visit https://leancloud.cn get AppID and AppKey.
leancloud_visitors:
  enable: true
  app_id: QImiFijLSOHYufsazlBVlwLg-gsssss
  app_key: AMcYaNHy9Y5OdH42k0dlll


# Tencent analytics ID
# tencent_analytics:

# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO
baidu_push: true

## 文章末尾是否显示打赏按钮
donate: 
  enable: true
  text: Enjoy it ? Donate me !  欣赏此文？求鼓励，求支持！
  alipay: 
  wechat: 


#! ---------------------------------------------------------------
#! DO NOT EDIT THE FOLLOWING SETTINGS
#! UNLESS YOU KNOW WHAT YOU ARE DOING
#! ---------------------------------------------------------------

# Motion
use_motion: true

# Fancybox
fancybox: true

# Static files
vendors: vendors
css: css
js: js
images: images

# Theme version
version: 0.5.0
</code></pre>
<p>具体的配置可以参考<a href="http://theme-next.iissnan.com/theme-settings.html">官方文档</a>，写的很详细。</p>
<h1 id="最后">最后</h1>
<p>懒癌又犯了，本来想写一些详细的配置，以后再说吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo系列教程之二：购买域名、设置DNS]]></title>
        <id>https://willxuecn.github.io/post/Hexo-2-20160320/</id>
        <link href="https://willxuecn.github.io/post/Hexo-2-20160320/">
        </link>
        <updated>2016-03-20T15:16:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<hr>
<blockquote>
<p>因为博客托管在github，所以个人博客地址是github的二级域名，不容易让人记住，也很难让百度收录，所以很多人都自己注册域名，和博客地址绑定，这样只要输入自己申请的域名，就能跳转到博客首页，也算是真正拥有了个人网站了。github pages也支持域名绑定。</p>
</blockquote>
<h1 id="正文">正文</h1>
<hr>
<p>我是在万网（阿里云）买的域名，top顶级域名第一年只要四元，很便宜，感觉个人用的话就不要买com这种域名了，当然看个人喜好，反正现在域名都很便宜cn这种解析到国内都要备案，还是别麻烦了。。。</p>
<ol>
<li>
<p>前往<a href="https://wanwang.aliyun.com/">万网</a>搜索自己想好的域名，没被注册的话，点击购买，可以淘宝账号登陆，之后支付宝付款。</p>
</li>
<li>
<p>购买玩以后进入工作台，点击域名，然后解析：<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo22.png" alt="" loading="lazy"></p>
</li>
<li>
<p>第一次可能需要填写个人信息，填完了，点击上面的域名解析-&gt;解析设置-&gt;添加解析，记录类型选A或CNAME，A记录的记录值就是ip地址，github提供了两个IP地址，<code>192.30.252.153和192.30.252.154</code>，随便填一个就行，解析记录设置两个www和不填，线路就默认就行了，CNAME记录值填你的github博客网址<code>imwillxue.github.io</code><br>
<img src="http://willxue.cn-bj.ufileos.com/hexo23.png" alt="" loading="lazy"></p>
</li>
</ol>
<p><strong>因为我的项目同时托管在github（国外）和coding（国内,后面可能会有教程），国内访问的话就会跳转到<code>willxue.coding.me</code>，国外就会跳转到<code>imwillxue.github.io</code>，如果你选的A记录就要在网站根目录新建<code>CNAME</code>文件，里面填写注册的域名<code>willxue.top</code></strong></p>
<p>好了现在访问你注册的域名就会跳转到博客首页了。</p>
<h1 id="结尾">结尾</h1>
<hr>
<p>明天又周一了，要早起上班了\(╯-╰)/。<br>
本来今天想写个hexo主题配置的，感觉很困，就写了这篇很简短的文章，不说了，睡觉。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo系列教程之一：hexo+github搭建独立博客]]></title>
        <id>https://willxuecn.github.io/post/Hexo-1-20160320/</id>
        <link href="https://willxuecn.github.io/post/Hexo-1-20160320/">
        </link>
        <updated>2016-03-19T16:22:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<hr>
<p>引用一下<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">阮一峰</a>--喜欢写Blog的人，会经历三个阶段。</p>
<blockquote>
<p>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。</p>
</blockquote>
<blockquote>
<p>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</p>
</blockquote>
<blockquote>
<p>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p>
</blockquote>
<p>对我这种不太喜欢写blog的人，没经历过第一二阶段，直接跳到了第三阶段，哈哈，也希望以后能多多坚持，记录人生（=<sup>_</sup>=）。</p>
<h1 id="正文">正文</h1>
<hr>
<p><strong>注意</strong> 本文主要针对<code>Windows</code>平台和<code>Hexo 3.x</code>。<code>Linux</code>和<code>Mac</code>用户可以参考<a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>。</p>
<h2 id="安装git">安装Git</h2>
<p>Windows下请下载并安装 <a href="https://git-scm.com/download/win">git</a>。</p>
<blockquote>
<p>作用：把本地的hexo代码提交到github上去。</p>
</blockquote>
<h2 id="安装nodejs">安装Node.js</h2>
<p>点击<a href="https://nodejs.org/en">Node.js</a>下载。</p>
<blockquote>
<p>作用：hexo运行环境，用来创建hexo博客框架。</p>
</blockquote>
<p><strong>以上两个软件安装很简单，按照步骤来就行了，就不一一赘述了。</strong></p>
<h2 id="安装hexo">安装Hexo</h2>
<p>运行环境安装玩以后，下面就进入正题了。<br>
安装前先介绍几个hexo常用的命令,#后面为注释。</p>
<pre><code>hexo g   #完整命令为hexo generate,用于生成静态文件
hexo s   #完整命令为hexo server,用于启动服务器，主要用来本地预览
hexo d   #完整命令为hexo deploy,用于将本地文件发布到github上
hexo n   #完整命令为hexo new,用于新建一篇文章
hexo clean   #清除生成的文件
</code></pre>
<p>安装很简单，在任意位置右键看到<code>Git Bash Here</code>。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo11.png" alt="git" loading="lazy"><br>
打开git命令窗口，输入</p>
<pre><code>npm install -g hexo 
</code></pre>
<p>当然国内的网可能反应很慢如果长时间没回应的话，可以换成淘宝npm镜像。</p>
<pre><code>npm config set registry  &quot;https://registry.npm.taobao.org&quot;
</code></pre>
<p>可以参考<a href="http://www.tuicool.com/articles/UVR3qqA">推酷</a>和<a href="http://yijiebuyi.com/blog/b12eac891cdc5f0dff127ae18dc386d4.html">一介布衣</a>这篇文章。</p>
<p>安装完成后，根据自己喜好建立目录（如F:\hexo），进入目录右键<code>Git Bash Here</code>，打开命令窗口输入：</p>
<pre><code>hexo init
</code></pre>
<p>Hexo 即会自动在目标文件夹建立网站所需要的所有文件。<br>
安装依赖包</p>
<pre><code>npm install
</code></pre>
<p>新建完成后，指定文件夹的目录如下：</p>
<pre><code>.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
</code></pre>
<p>下面可以简单的查看一下效果，输入命令：</p>
<pre><code>hexo s
</code></pre>
<p>然后用浏览器访问<code>http://localhost:4000</code>，应该能看到默认的效果了（自带主题landscape）。</p>
<h2 id="部署到github">部署到Github</h2>
<p>本地环境搭建好以后，就该发布到互联网，让别人可以访问，我们选择github pages。</p>
<h3 id="创建仓库">创建仓库</h3>
<ol>
<li>注册<a href="https://github.com/">github</a>账号并登录进入个人中心。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo12.png" alt="github" loading="lazy"></li>
<li>点击Respositories，然后New,新建一个仓库，如下图，注意仓库名必须为 你的用户名.github.io，例如我的用户名<code>imwillxue</code>，仓库名为<code>imwillxue.github.io</code>。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo13.png" alt="new" loading="lazy"></li>
<li>过几分钟就可以访问了。</li>
</ol>
<h3 id="部署">部署</h3>
<p>编辑全局配置文件<code>_config.yml</code>(在F:\hexo下)。部署时，把下面的<code>imwillxue</code>都换成你的账号名。</p>
<pre><code>deploy: 
  type: git
  repository: git@github.com:imwillxue/imwillxue.github.io.git
  branch: master
</code></pre>
<p>**注：**上面是SSH方式的配置，https方式要把url换成<code>https://github.com/imwillxue/imwillxue.github.io.git</code>。<br>
如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下,方便以后push代码。</p>
<p>在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。</p>
<pre><code>ls -al ~/.ssh
</code></pre>
<p>如果不存在就没有关系，如果存在的话，可以直接删除.ssh文件夹里面所有文件。输入以下指令（邮箱就是你注册Github时候的邮箱）</p>
<pre><code>ssh-keygen -t rsa -C &quot;example@126.com&quot;
</code></pre>
<p>回车，出现提示让你输入的时候直接回车就行了。</p>
<p>之后找到用户目录下.ssh文件夹，打开<code>id_rsa.pub</code>文件，复制里面的内容。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo14.png" alt="ssh" loading="lazy"></p>
<p>打开github网页找到右上角<code>setting</code>，进去点SSH keys，新建一个SSH。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo15.png" alt="ssh" loading="lazy"><br>
<img src="http://willxue.cn-bj.ufileos.com/hexo16.png" alt="ssh" loading="lazy"><br>
<img src="http://willxue.cn-bj.ufileos.com/hexo17.png" alt="ssh" loading="lazy"></p>
<p>回到控制台输入测试命令。</p>
<pre><code>ssh -T git@github.com
</code></pre>
<p>之后会提示连接成功，第一次连可能会警告，输入yes就行了，然后提示连接成功。<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo18.png" alt="ssh" loading="lazy"></p>
<p>配置好以后就可以push到github了，输入命令：</p>
<pre><code>hexo g

hexo d
</code></pre>
<p>第一次<code>hexo d</code>可能会报错：<code>ERROR Deployer not found:git</code>，需要安装一下<code>hexo-deployer-git</code>这个插件：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>安装好了继续执行<code>hexo d</code>部署命令，就可以访问了。我的是<code>imwillxue.github.io</code>。<br>
**注：**在hexo d之后会有个这个提示：<br>
<img src="http://willxue.cn-bj.ufileos.com/hexo19.png" alt="" loading="lazy"></p>
<p>需要输入注册邮箱和用户名</p>
<pre><code>git config --global user.email &quot;example@126.com&quot;
git config --global user.name &quot;imwillxue&quot;
</code></pre>
<p>打开网站看一看吧。</p>
<h3 id="发表文章">发表文章</h3>
<ol>
<li>输入命令新建一篇文章：</li>
</ol>
<pre><code>hexo n &quot;文章名字&quot;
</code></pre>
<ol start="2">
<li>打开F:\hexo\source_posts中新建的<code>文章名字.md</code>文件，我用的Notepad++。</li>
</ol>
<pre><code>title: 文章名字   #标题
date: 2016-03-16 23:04:09   #发表日期
categories: blog   #文章文类
tags: [文章,随笔]   #文章标签
---
#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。
</code></pre>
<h1 id="参考">参考</h1>
<p><a href="http://opiece.me/2015/04/09/hexo-guide/">使用Hexo搭建个人博客(基于hexo3.0)</a><br>
<a href="http://www.zipperary.com/2013/05/28/hexo-guide-2/">hexo系列教程：（二）搭建hexo博客</a></p>
<h1 id="最后">最后</h1>
<p>没了，请看下期。</p>
]]></content>
    </entry>
</feed>